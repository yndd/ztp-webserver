// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/webserver/interfaces/webserveroperator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/yndd/ztp-dhcp/pkg/backend"
)

// MockWebserverOperations is a mock of WebserverOperations interface.
type MockWebserverOperations struct {
	ctrl     *gomock.Controller
	recorder *MockWebserverOperationsMockRecorder
}

// MockWebserverOperationsMockRecorder is the mock recorder for MockWebserverOperations.
type MockWebserverOperationsMockRecorder struct {
	mock *MockWebserverOperations
}

// NewMockWebserverOperations creates a new mock instance.
func NewMockWebserverOperations(ctrl *gomock.Controller) *MockWebserverOperations {
	mock := &MockWebserverOperations{ctrl: ctrl}
	mock.recorder = &MockWebserverOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebserverOperations) EXPECT() *MockWebserverOperationsMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWebserverOperations) Run(port int, storageFolder string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", port, storageFolder)
}

// Run indicates an expected call of Run.
func (mr *MockWebserverOperationsMockRecorder) Run(port, storageFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWebserverOperations)(nil).Run), port, storageFolder)
}

// SetBackend mocks base method.
func (m *MockWebserverOperations) SetBackend(arg0 backend.ZtpBackend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackend", arg0)
}

// SetBackend indicates an expected call of SetBackend.
func (mr *MockWebserverOperationsMockRecorder) SetBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackend", reflect.TypeOf((*MockWebserverOperations)(nil).SetBackend), arg0)
}
